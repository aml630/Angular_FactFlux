// <auto-generated />
using System;
using FactFluxV3.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FactFluxV3.Migrations
{
    [DbContext(typeof(FactFluxV3Context))]
    [Migration("20190225041546_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FactFluxV3.Models.AggregatedCounter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<long>("Value");

                    b.HasKey("Id");

                    b.HasIndex("Value", "Key")
                        .IsUnique()
                        .HasName("UX_HangFire_CounterAggregated_Key");

                    b.ToTable("AggregatedCounter","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.Article", b =>
                {
                    b.Property<int>("ArticleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("ArticleTitle")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("ArticleType");

                    b.Property<string>("ArticleUrl")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DatePublished")
                        .HasColumnType("datetime");

                    b.Property<int>("FeedId");

                    b.HasKey("ArticleId");

                    b.HasIndex("FeedId");

                    b.ToTable("Article");
                });

            modelBuilder.Entity("FactFluxV3.Models.Counter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<short>("Value");

                    b.HasKey("Id");

                    b.HasIndex("Value", "Key")
                        .HasName("IX_HangFire_Counter_Key");

                    b.ToTable("Counter","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.Hash", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireAt");

                    b.Property<string>("Field")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("ExpireAt", "Key")
                        .HasName("IX_HangFire_Hash_Key");

                    b.HasIndex("Id", "ExpireAt")
                        .HasName("IX_HangFire_Hash_ExpireAt");

                    b.HasIndex("Key", "Field")
                        .IsUnique()
                        .HasName("UX_HangFire_Hash_Key_Field");

                    b.ToTable("Hash","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.Images", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ContentId");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<string>("ImageLocation")
                        .HasMaxLength(150);

                    b.HasKey("ImageId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("FactFluxV3.Models.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Arguments")
                        .IsRequired();

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("InvocationData")
                        .IsRequired();

                    b.Property<int?>("StateId");

                    b.Property<string>("StateName")
                        .HasMaxLength(20);

                    b.HasKey("Id");

                    b.HasIndex("StateName")
                        .HasName("IX_HangFire_Job_StateName");

                    b.HasIndex("Id", "ExpireAt")
                        .HasName("IX_HangFire_Job_ExpireAt");

                    b.ToTable("Job","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.JobParameter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("JobId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.HasIndex("JobId", "Name")
                        .HasName("IX_HangFire_JobParameter_JobIdAndName");

                    b.ToTable("JobParameter","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.JobQueue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("FetchedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("JobId");

                    b.Property<string>("Queue")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Queue", "FetchedAt")
                        .HasName("IX_HangFire_JobQueue_QueueAndFetchedAt");

                    b.ToTable("JobQueue","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.List", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "ExpireAt")
                        .HasName("IX_HangFire_List_ExpireAt");

                    b.HasIndex("ExpireAt", "Value", "Key")
                        .HasName("IX_HangFire_List_Key");

                    b.ToTable("List","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.ParentWords", b =>
                {
                    b.Property<int>("WordJoinId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ChildWordId");

                    b.Property<int>("ParentWordId");

                    b.HasKey("WordJoinId");

                    b.HasIndex("ChildWordId");

                    b.HasIndex("ParentWordId");

                    b.ToTable("ParentWords");
                });

            modelBuilder.Entity("FactFluxV3.Models.Rssfeeds", b =>
                {
                    b.Property<int>("FeedId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FeedImage")
                        .IsUnicode(false);

                    b.Property<string>("FeedLink")
                        .HasMaxLength(250)
                        .IsUnicode(false);

                    b.Property<string>("FeedTitle")
                        .HasMaxLength(250);

                    b.Property<DateTime?>("LastUpdated")
                        .HasColumnType("datetime");

                    b.Property<string>("VideoLink")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("FeedId");

                    b.ToTable("RSSFeeds");
                });

            modelBuilder.Entity("FactFluxV3.Models.Schema", b =>
                {
                    b.Property<int>("Version");

                    b.HasKey("Version");

                    b.ToTable("Schema","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.Server", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(100);

                    b.Property<string>("Data");

                    b.Property<DateTime>("LastHeartbeat")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.ToTable("Server","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("ExpireAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<double>("Score");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("Id", "ExpireAt")
                        .HasName("IX_HangFire_Set_ExpireAt");

                    b.HasIndex("Key", "Value")
                        .IsUnique()
                        .HasName("UX_HangFire_Set_KeyAndValue");

                    b.HasIndex("ExpireAt", "Value", "Key")
                        .HasName("IX_HangFire_Set_Key");

                    b.ToTable("Set","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<string>("Data");

                    b.Property<int>("JobId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Reason")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("JobId")
                        .HasName("IX_HangFire_State_JobId");

                    b.ToTable("State","HangFire");
                });

            modelBuilder.Entity("FactFluxV3.Models.Tweets", b =>
                {
                    b.Property<int>("TweetId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DateTweeted")
                        .HasColumnType("datetime");

                    b.Property<string>("EmbedHtml")
                        .IsRequired();

                    b.Property<string>("TweetText")
                        .IsRequired();

                    b.Property<int>("TwitterUserId");

                    b.HasKey("TweetId");

                    b.HasIndex("TwitterUserId");

                    b.ToTable("Tweets");
                });

            modelBuilder.Entity("FactFluxV3.Models.TwitterUsers", b =>
                {
                    b.Property<int>("TwitterUserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<string>("Image")
                        .HasMaxLength(90);

                    b.Property<string>("TwitterUsername")
                        .IsRequired()
                        .HasMaxLength(70);

                    b.HasKey("TwitterUserId");

                    b.ToTable("TwitterUsers");
                });

            modelBuilder.Entity("FactFluxV3.Models.WordLogs", b =>
                {
                    b.Property<int>("WordLogId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ArticleId");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("datetime");

                    b.Property<int>("WordId");

                    b.HasKey("WordLogId");

                    b.HasIndex("ArticleId");

                    b.HasIndex("WordId");

                    b.ToTable("WordLogs");
                });

            modelBuilder.Entity("FactFluxV3.Models.Words", b =>
                {
                    b.Property<int>("WordId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Banned");

                    b.Property<int>("Daily");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DateIncremented")
                        .HasColumnType("datetime");

                    b.Property<bool>("Main");

                    b.Property<int>("Monthly");

                    b.Property<int>("Type");

                    b.Property<string>("Word")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<int>("Yearly");

                    b.HasKey("WordId");

                    b.ToTable("Words");
                });

            modelBuilder.Entity("FactFluxV3.Models.Article", b =>
                {
                    b.HasOne("FactFluxV3.Models.Rssfeeds", "Feed")
                        .WithMany("Article")
                        .HasForeignKey("FeedId")
                        .HasConstraintName("FK__Article__FeedId__25869641");
                });

            modelBuilder.Entity("FactFluxV3.Models.JobParameter", b =>
                {
                    b.HasOne("FactFluxV3.Models.Job", "Job")
                        .WithMany("JobParameter")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_HangFire_JobParameter_Job")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FactFluxV3.Models.ParentWords", b =>
                {
                    b.HasOne("FactFluxV3.Models.Words", "ChildWord")
                        .WithMany("ParentWordsChildWord")
                        .HasForeignKey("ChildWordId")
                        .HasConstraintName("FK__ParentWor__Child__35BCFE0A");

                    b.HasOne("FactFluxV3.Models.Words", "ParentWord")
                        .WithMany("ParentWordsParentWord")
                        .HasForeignKey("ParentWordId")
                        .HasConstraintName("FK__ParentWor__Paren__36B12243");
                });

            modelBuilder.Entity("FactFluxV3.Models.State", b =>
                {
                    b.HasOne("FactFluxV3.Models.Job", "Job")
                        .WithMany("State")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK_HangFire_State_Job")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("FactFluxV3.Models.Tweets", b =>
                {
                    b.HasOne("FactFluxV3.Models.TwitterUsers", "TwitterUser")
                        .WithMany("Tweets")
                        .HasForeignKey("TwitterUserId")
                        .HasConstraintName("FK__Tweets__TwitterU__7B5B524B");
                });

            modelBuilder.Entity("FactFluxV3.Models.WordLogs", b =>
                {
                    b.HasOne("FactFluxV3.Models.Article", "Article")
                        .WithMany("WordLogs")
                        .HasForeignKey("ArticleId")
                        .HasConstraintName("FK__WordLogs__Articl__2B3F6F97");

                    b.HasOne("FactFluxV3.Models.Words", "Word")
                        .WithMany("WordLogs")
                        .HasForeignKey("WordId")
                        .HasConstraintName("FK__WordLogs__WordId__2C3393D0");
                });
#pragma warning restore 612, 618
        }
    }
}
